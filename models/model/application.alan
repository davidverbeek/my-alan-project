users
	anonymous

interfaces
	'platform-versions' ( ) = .'Platform Versions'

root {
	'Platform Versions': group {
		can-update: interface 'platform-versions'

		'Last Synchronization': number 'date and time'
		'Synchronize': command { } external
		'Platform Version': text
		'System Types': collection ['System Type'] {
			'System Type': text
			'Version': text
			// this is what we send *to* the interface:
			'Send Message': command {
				'Message': text
			} external
			// this is what we receive back:
			'Receive Result': command @hidden {
				'ID': text
				'Timestamp': number 'date and time'
			} as $ => update ^ ^ .'Results' = (
				'Message Results' = create (
					'ID' = $ .'ID'
					'Timestamp' = $ .'Timestamp'
					'System Type' = .'System Type'
				)
			)
		}
		// this is what we receive back:
		'Webservice Callback': command @hidden {
			'ID': text
			'Timestamp': number 'date and time'
			'Parameters': collection ['Parameter'] {
				'Parameter': text
				'Value': text
			}
		} as $ => update ^ .'Results' = (
			'Webservice Callbacks' = create (
				'ID' = $ .'ID'
				'Timestamp' = $ .'Timestamp'
				'Parameters' = walk $ .'Parameters'* as $ (
					create (
						'Parameter' = $ .'Parameter'
						'Value' = $ .'Value'
					)
				)
			)
		)
	}
	'Results': group {
		'Message Results': collection ['ID'] {
			'ID': text @default: guid
			'Timestamp': number 'date and time'
			'System Type': text ~> ^ ^ .'Platform Versions'.'System Types'[]
		}
		'Webservice Callbacks': collection ['ID'] {
			'ID': text @default: guid
			'Timestamp': number 'date and time' @default: now
			'Parameters': collection ['Parameter'] {
				'Parameter': text
				'Value': text
			}
		}
	}
}

numerical-types
	'seconds' @duration: seconds
	'date and time': time-in-seconds in 'seconds' @date-time
